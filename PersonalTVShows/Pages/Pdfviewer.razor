@page "/pdfviewer"
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
@using PersonalTVShows.Helpers;
@using PersonalTVShows.Models.Documents;

@inject IWebAssemblyHostEnvironment HostEnvironment

@if (PdfList.Count > 0)
{
    <MudSelect T="string"
    @bind-Value="PdfPath"
               Label="Pdfs to read"
               Placeholder="Please Select Item"
               Variant="Variant.Filled"
               AnchorOrigin="Origin.BottomCenter">
        @foreach (PdfDocument item in PdfList)
        {
            <MudSelectItem Value="@(item.PdfPath)">@item.PdfName</MudSelectItem>
        }
    </MudSelect>

    @if (!string.IsNullOrEmpty(PdfPath))
    {
        <div class="embed-responsive embed-responsive-16by9">
            <iframe class="embed-responsive-item"
                    src="@($"{PdfPath}#view=FitH ")"
                    style="width:100%; height:70vh"
                    allowfullscreen></iframe>
        </div>
    }
}
else
{
    <MudText Class="h1">No list available to show</MudText>
}

@code {
    private PdfDocument Pdf { get; set; } = new();
    private PdfList PdfList { get; set; } = new();
    public string PdfPath { get; set; } = string.Empty;
    private String Env { get; set; }
    private String BaseLink { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Env = HostEnvironment.Environment;

        if (Env == "Production")
        {
            BaseLink = "/TvShows/";
        }
        else if (Env == "Development")
        {
            BaseLink = "/";
        }

        PdfList = PdfHelper.CreatePdfList(BaseLink);
    }

}